<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="Utility_8hpp" kind="file" language="C++">
    <compoundname>Utility.hpp</compoundname>
    <includes local="no">random</includes>
    <includes local="no">bitsery/adapter/buffer.h</includes>
    <includes local="no">bitsery/bitsery.h</includes>
    <includes local="no">bitsery/brief_syntax.h</includes>
    <includes local="no">bitsery/brief_syntax/vector.h</includes>
    <includes local="no">spdlog/spdlog.h</includes>
    <includes refid="Type_8hpp" local="yes">core/Type.hpp</includes>
    <includedby refid="Client_8hpp" local="yes">core/Client.hpp</includedby>
    <includedby refid="Foundation_8hpp" local="yes">core/Foundation.hpp</includedby>
    <includedby refid="Log_8hpp" local="yes">core/Log.hpp</includedby>
    <includedby refid="TransportReceiver_8hpp" local="yes">core/TransportReceiver.hpp</includedby>
    <incdepgraph>
      <node id="8">
        <label>core/Type.hpp</label>
        <link refid="Type_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>cstdint</label>
      </node>
      <node id="6">
        <label>bitsery/brief_syntax/vector.h</label>
      </node>
      <node id="1">
        <label>core/Utility.hpp</label>
        <link refid="Utility_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>boost/container/small_vector.hpp</label>
      </node>
      <node id="7">
        <label>spdlog/spdlog.h</label>
      </node>
      <node id="2">
        <label>random</label>
      </node>
      <node id="4">
        <label>bitsery/bitsery.h</label>
      </node>
      <node id="3">
        <label>bitsery/adapter/buffer.h</label>
      </node>
      <node id="10">
        <label>span</label>
      </node>
      <node id="5">
        <label>bitsery/brief_syntax.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="13">
        <label>transport/Simulated.hpp</label>
        <link refid="Simulated_8hpp_source"/>
      </node>
      <node id="10">
        <label>common/Quorum.hpp</label>
        <link refid="Quorum_8hpp_source"/>
      </node>
      <node id="4">
        <label>app/Mock.hpp</label>
        <link refid="Mock_8hpp_source"/>
      </node>
      <node id="11">
        <label>common/StatefulTimeout.hpp</label>
        <link refid="StatefulTimeout_8hpp_source"/>
      </node>
      <node id="1">
        <label>core/Utility.hpp</label>
        <link refid="Utility_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>transport/DPDKClient.hpp</label>
        <link refid="DPDKClient_8hpp_source"/>
      </node>
      <node id="3">
        <label>core/Foundation.hpp</label>
        <link refid="Foundation_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>core/Log.hpp</label>
        <link refid="Log_8hpp_source"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>common/ChainLog.hpp</label>
        <link refid="ChainLog_8hpp_source"/>
      </node>
      <node id="15">
        <label>core/Bitsery.hpp</label>
        <link refid="Bitsery_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>app/Null.hpp</label>
        <link refid="Null_8hpp_source"/>
      </node>
      <node id="8">
        <label>common/ClientTable.hpp</label>
        <link refid="ClientTable_8hpp_source"/>
      </node>
      <node id="9">
        <label>common/ListLog.hpp</label>
        <link refid="ListLog_8hpp_source"/>
      </node>
      <node id="16">
        <label>core/TransportReceiver.hpp</label>
        <link refid="TransportReceiver_8hpp_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>core/Client.hpp</label>
        <link refid="Client_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>common/BasicClient.hpp</label>
        <link refid="BasicClient_8hpp_source"/>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespaceoskr">oskr</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="Utility_8hpp_1a1dd4c62dac3d495dfcc19084571c828d" prot="public" static="no">
        <name>rdebug</name>
        <param><defname>fmt</defname></param>
        <param><defname>...</defname></param>
        <initializer>debug(&quot;[%d] &quot; fmt, this-&gt;replica_id, ##__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/Utility.hpp" line="29" column="9" bodyfile="core/Utility.hpp" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="Utility_8hpp_1a0e943f4735514f884fefe12215a1e399" prot="public" static="no">
        <name>rinfo</name>
        <param><defname>fmt</defname></param>
        <param><defname>...</defname></param>
        <initializer>info(&quot;[%d] &quot; fmt, this-&gt;replica_id, ##__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/Utility.hpp" line="30" column="9" bodyfile="core/Utility.hpp" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="Utility_8hpp_1a2c1a4a18443f353a4d479e5df840ee4a" prot="public" static="no">
        <name>rwarn</name>
        <param><defname>fmt</defname></param>
        <param><defname>...</defname></param>
        <initializer>warn(&quot;[%d] &quot; fmt, this-&gt;replica_id, ##__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/Utility.hpp" line="31" column="9" bodyfile="core/Utility.hpp" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="Utility_8hpp_1a97be4390c6add105b990198238b9f597" prot="public" static="no">
        <name>rpanic</name>
        <param><defname>fmt</defname></param>
        <param><defname>...</defname></param>
        <initializer>panic(&quot;[%d] &quot; fmt, this-&gt;replica_id, ##__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="core/Utility.hpp" line="32" column="9" bodyfile="core/Utility.hpp" bodystart="32" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;random&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;bitsery/adapter/buffer.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;bitsery/bitsery.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;bitsery/brief_syntax.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;bitsery/brief_syntax/vector.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;spdlog/spdlog.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="Type_8hpp" kindref="compound">core/Type.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">oskr</highlight></codeline>
<codeline lineno="13"><highlight class="normal">{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>std::literals::chrono_literals::operator</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">ms,</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>std::literals::chrono_literals::operator</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">us;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>spdlog::debug,<sp/>spdlog::info,<sp/>spdlog::warn;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="21"><highlight class="normal">[[noreturn]]<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>panic(spdlog::format_string_t&lt;Args...&gt;<sp/>fmt,<sp/>Args<sp/>&amp;&amp;...args)</highlight></codeline>
<codeline lineno="22"><highlight class="normal">{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::error(fmt,<sp/>std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>std::abort();</highlight></codeline>
<codeline lineno="25"><highlight class="normal">}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO<sp/>explore<sp/>a<sp/>at-least-equally<sp/>convinent<sp/>but<sp/>better<sp/>way</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>OSKR_NO_RLOGGING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>rdebug(fmt,<sp/>...)<sp/>debug(&quot;[%d]<sp/>&quot;</highlight><highlight class="normal"><sp/>fmt,<sp/>this-&gt;replica_id,<sp/>##__VA_ARGS__)</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>rinfo(fmt,<sp/>...)<sp/>info(&quot;[%d]<sp/>&quot;</highlight><highlight class="normal"><sp/>fmt,<sp/>this-&gt;replica_id,<sp/>##__VA_ARGS__)</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>rwarn(fmt,<sp/>...)<sp/>warn(&quot;[%d]<sp/>&quot;</highlight><highlight class="normal"><sp/>fmt,<sp/>this-&gt;replica_id,<sp/>##__VA_ARGS__)</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>rpanic(fmt,<sp/>...)<sp/>panic(&quot;[%d]<sp/>&quot;</highlight><highlight class="normal"><sp/>fmt,<sp/>this-&gt;replica_id,<sp/>##__VA_ARGS__)</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal">std::default_random_engine<sp/>&amp;random_engine()</highlight></codeline>
<codeline lineno="36"><highlight class="normal">{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>thread_local<sp/>std::random_device<sp/>seed;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>thread_local<sp/>std::default_random_engine<sp/>engine(seed());</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>engine;</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Message,<sp/>std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>BUFFER_SIZE&gt;</highlight></codeline>
<codeline lineno="43"><highlight class="normal">std::size_t<sp/>bitserySerialize(TxSpan&lt;BUFFER_SIZE&gt;<sp/>buffer,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Message<sp/>&amp;message)</highlight></codeline>
<codeline lineno="44"><highlight class="normal">{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bitsery::quickSerialization&lt;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bitsery::OutputBufferAdapter&lt;std::uint8_t[BUFFER_SIZE]&gt;,<sp/>Message&gt;(</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(std::uint8_t(*)[BUFFER_SIZE])buffer.data(),<sp/>message);</highlight></codeline>
<codeline lineno="48"><highlight class="normal">}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Message&gt;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>bitseryDeserialize(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RxSpan<sp/>span,<sp/>Message<sp/>&amp;message)</highlight></codeline>
<codeline lineno="52"><highlight class="normal">{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>state<sp/>=<sp/>bitsery::quickDeserialization&lt;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bitsery::InputBufferAdapter&lt;std::uint8_t<sp/>*&gt;,<sp/>Message&gt;(</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{span.data(),<sp/>span.size()},<sp/>message);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO<sp/>consider<sp/>protect<sp/>again<sp/>malicious<sp/>message<sp/>under<sp/>BFT<sp/>situation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state.first<sp/>!=<sp/>bitsery::ReaderError::NoError<sp/>||<sp/>!state.second)<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>panic(</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Deserialize<sp/>failed:<sp/>error<sp/>=<sp/>{},<sp/>completed<sp/>=<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>state.first,</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.second);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal">}</highlight></codeline>
<codeline lineno="63"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>oskr</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="core/Utility.hpp"/>
  </compounddef>
</doxygen>
