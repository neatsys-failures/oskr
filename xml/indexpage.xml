<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="indexpage" kind="page">
    <compoundname>index</compoundname>
    <title>Oskr</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><anchor id="index_1md_README"/></para>
<sect2 id="index_1autotoc_md0">
<title>High Performance Distributed Protocols Collection</title>
<para><image type="html" name="https://img.shields.io/github/repo-size/sgdxbc/oskr" alt="GitHub repo size" inline="yes"></image>
 <image type="html" name="https://img.shields.io/github/languages/code-size/sgdxbc/oskr" alt="GitHub code size in bytes" inline="yes"></image>
 <image type="html" name="https://img.shields.io/tokei/lines/github/sgdxbc/oskr" alt="Lines of code" inline="yes"></image>
 <image type="html" name="https://img.shields.io/github/contributors/sgdxbc/oskr" alt="GitHub contributors" inline="yes"></image>
 <image type="html" name="https://img.shields.io/github/commit-activity/m/sgdxbc/oskr" alt="GitHub commit activity" inline="yes"></image>
</para>
<para><bold>Motivation.</bold> This is an attempt to improve based on <ulink url="https://github.com/UWSysLab/specpaxos">specpaxos</ulink>. The detail of consideration is listed in <ulink url="https://sgdxbc.github.io/ideas/2021-12-15/p0">a piece of blog</ulink>.</para>
<para><bold>Why named Oskr?</bold> The name is derived from the Oscars (Academy Awards), because the core of this project is based on a specialized actor model.</para>
<para><bold>Present issues:</bold><itemizedlist>
<listitem><para>Heavily-used template programming + self-contained header result in terrible error reporting long compilation time. Because most class in header are templated, precompiled header not help much.<itemizedlist>
<listitem><para>Template programming also make interface more cumbersome with <computeroutput>typename</computeroutput> and such.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>Serialization leverage Bitsery, which is a little bit lack of document.</para>
</listitem><listitem><para>CMake makes me feel good, meson makes me feel better, but at the end of the day I have to use CMake because of the supportness of most dependencies. This causes the setup of DPDK a little bit hacky and maybe fragile.</para>
</listitem><listitem><para>The <emphasis>executors</emphasis> draft is not standardized yet. Once it is done, certain part of the project (i.e. <computeroutput>Transport</computeroutput>) may be invalidated by it:<itemizedlist>
<listitem><para>For non-DPDK <computeroutput>Transport</computeroutput>, standard may provide a better alternative but the migration could be hard.</para>
</listitem><listitem><para>Althrough standard or anyone else probably will not provide DPDK <computeroutput>Transport</computeroutput>s, its non-standard shape may impede other projects to adapt it.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
<para><bold>Roadmap:</bold><itemizedlist>
<listitem><para>[ ] Architecture design + Viewstamped Replication</para>
</listitem><listitem><para>[ ] PBFT</para>
</listitem><listitem><para>[ ] HotStuff</para>
</listitem><listitem><para>[ ] Two-phase commit</para>
</listitem></itemizedlist>
</para>
<para><hruler/>
</para>
<para>Develop on Ubuntu 21.10, with Clang version 13. Required apt packages:</para>
<para><programlisting><codeline><highlight class="normal">clang<sp/>cmake<sp/>pkg-config<sp/>meson<sp/>ninja-build<sp/>python3-pyelftools<sp/>libboost-dev<sp/>clang-tidy</highlight></codeline>
</programlisting></para>
<para>Step 1, clone the repo with <computeroutput>--recursive</computeroutput>.</para>
<para>Step 2, build CMake project as usual. Initial configuration will build a DPDK, which takes some time. Notable targets:<itemizedlist>
<listitem><para><computeroutput>Client</computeroutput> benchmark client, executable at <computeroutput>&lt;build&gt;/benchmark/Client</computeroutput>.</para>
</listitem><listitem><para><computeroutput>Test*</computeroutput> unit tests (to get full list run <computeroutput>make help | grep Test</computeroutput>), executable at <computeroutput>&lt;build&gt;/test/Test*</computeroutput></para>
</listitem></itemizedlist>
</para>
<para><emphasis>Work in progress.</emphasis></para>
<para><hruler/>
</para>
<para>Project structure:<itemizedlist>
<listitem><para><computeroutput>core</computeroutput>[^1] behavioral definition of abstraction components. Pure interfaces without concrete logic.<itemizedlist>
<listitem><para><computeroutput><ref refid="Foundation_8hpp_source" kindref="compound">Foundation.hpp</ref></computeroutput> an all-in-one header for protocol implementation.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><computeroutput>common</computeroutput>[^1] common behavior logic prepared for reusing.</para>
</listitem><listitem><para><computeroutput>app</computeroutput>[^1] builtin applications to be supported by protocols.</para>
</listitem><listitem><para><computeroutput>transport</computeroutput>[^1] runtime implementations that support protocols.</para>
</listitem><listitem><para><computeroutput>replication</computeroutput> replication protocols.</para>
</listitem><listitem><para><computeroutput>transactional</computeroutput> transactional protocols.</para>
</listitem><listitem><para><computeroutput>dependency</computeroutput> git submodule stubs.</para>
</listitem><listitem><para><computeroutput>test</computeroutput> flat directory for tests.</para>
</listitem><listitem><para><computeroutput>benchmark</computeroutput> universal entry executable for running all protocols.</para>
</listitem></itemizedlist>
</para>
<para>[^1]: Document of these source is hosted on <ulink url="https://sgdxbc.github.io/oskr">project site</ulink>. </para>
</sect2>
    </detaileddescription>
    <location file="README.md"/>
  </compounddef>
</doxygen>
